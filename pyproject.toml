[tool.poetry]
name = "omoide"
version = "0.3.8"
description = "Image storing application"
authors = ["IgorZyktin <nicord@yandex.ru>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.100.0"
uvicorn = "^0.23.1"
Jinja2 = "^3.1.4"
python-multipart = "^0.0.6"
databases = "^0.7.0"
asyncpg = "^0.28.0"
bcrypt = "^4.2.0"
SQLAlchemy = "^1.4.53"
click = "^8.1.7"
ujson = "^5.10.0"
loguru = "^0.7.0"
gunicorn = "^21.2.0"
prettytable = "^3.10.2"
psycopg2-binary = "^2.9.9"
pydantic = "^2.8.2"
pydantic-core = "^2.20.1"
starlette = "^0.27.0"
pydantic-settings = "^2.4.0"
httpx = "^0.27.0"

[tool.poetry.dev-dependencies]
pytest = "^8.3.2"
coverage = "^7.6.0"
pytest-asyncio = "^0.21.1"
mypy = "^1.11.1"
sqlalchemy2-stubs = "^0.0.2-alpha.29"
types-ujson = "^5.10.0.20240515"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
line-length = 79
target-version = "py310"

lint.select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async - starting from version 0.0.270
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PLC",   # Convention
    "PLE",   # Error
    "PLR",   # Refactor
    "PLW",   # Warning
    "PT",    # flake8-pytest-style
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]

lint.ignore = [
    "COM812",  # Checks for the absence of trailing commas
    "D104",    # Missing docstring in public package
    "D203",    # 1 blank line required before class docstring
    "D204",    # 1 blank line required after class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "ISC001",  # Checks for implicitly concatenated strings on a single line
    "RUF100",  # Unused noqa directive (non-enabled: F401, `F403`)
    "S101",    # Use of assert detected
    "S104",    # Possible binding to all interfaces
    "S105",    # Possible hardcoded password assigned
    "S106",    # Possible hardcoded password assigned
    "S311",    # Standard pseudo-random generators for cryptographic purposes
    "SIM108",  # Use ternary operator instead of `if`-`else`-block
    "TRY401",  # Redundant exception object included in logging.exception call
    "S324",    # Probable use of insecure hash functions
    "PLE1205", # Too many arguments for `logging` format string
]

[tool.ruff.lint.per-file-ignores]
"omoide/tests/*" = [
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "D100",    # Missing docstring in public module
    "D103",    # Missing docstring in public function
    "EM101",   # Exception must not use a string literal
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true
order-by-type = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 6

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
exclude = ["^venv"]
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin"
]

[[tool.mypy.overrides]]
module = "omoide.tests.*"
ignore_errors = true

[tool.coverage.run]
branch = true
omit = [
    "./etc/*",
    "./venv/*",
]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "pragma\\: no cover",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true
